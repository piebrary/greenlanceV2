.container {
    background-color: var(--componentInputContainerBackgroundColor);
    display: flex;
    justify-content: start;
    flex-direction: column;
    border-radius: var(--componentInputContainerBorderRadius);
    padding: var(--componentInputContainerPadding);
    width: 100%;
}

.label {
    font-size: var(--componentInputInputFontSize);
    word-wrap: break-word;
    margin-bottom: 6px;
    margin-left: 4px;
}

.inputContainer {
    flex-grow: 1;
    width: 100%;
}

.inputField {
    display: flex;
    align-items: var(--componentInputInputFieldAlignItems);
    border-radius: var(--componentInputInputFieldBorderRadius);
    background-color: var(--componentInputInputFieldBackgroundColor);
}

.inputField:focus-within .input:not(:read-only),
.inputField:hover .input:not(:read-only) {
    transition: var(--componentInputTransition);
    box-shadow: var(--componentInputInputFieldBoxShadowFocus);
    -webkit-appearance: none;
    border-bottom-left-radius: var(--componentInputInputFieldBorderBottomLeftRadius);
    border-bottom-right-radius: var(--componentInputInputFieldBorderBottomRightRadius);
}

.inputField:focus-within .input:not(:read-only) ~ .passwordToggle,
.inputField:hover .input:not(:read-only) ~ .passwordToggle {
    box-shadow: var(--componentInputInputFieldBoxShadowFocus);
    transition: var(--componentInputTransition);
}

.input {
    box-sizing: border-box;
    color: var(--componentInputInputColor);
    border: var(--componentInputInputBorder);
    padding: var(--componentInputInputPadding);
    font-size: var(--componentInputInputFontSize);
    outline: none;
    text-align: var(--componentInputInputTextAlign);
    width: 100%;
    background-color: var(--componentInputInputBackgroundColor);
    /* height: var(--componentInputInputHeight); */
    height: fit-content;
    min-height: 40px;
    /* resize: vertical; */
    overflow: auto;
    transition: var(--componentInputTransition);
}

.input.isPicker {
    cursor: pointer;
    user-select: none;
}

.input:focus {
    border: var(--componentInputInputBorderFocus);
    outline: none;
}

.input:read-only {
    background-color: var(--componentInputInputBackgroundColorReadOnly);
    color: var(--componentInputInputColorReadOnly);
    box-shadow: var(--componentInputInputBoxShadowReadOnly);
    border-radius: var(--componentInputInputBorderRadiusReadOnly);
}

.input:read-only ~ .passwordToggle {
    background-color: var(--componentInputInputBackgroundColorReadOnlyHideToggle);
}

.passwordToggle {
    display: flex;
    align-items: center;
    cursor: pointer;
    /* transition: var(--componentInputHideToggleTransition); */
    padding: var(--componentInputHideTogglePadding);
}

.passwordToggle:hover {
    color: var(--componentInputHideToggleColorHover);
}

.errorMessage {
    min-width: 100%;
    color: var(--componentInputErrorMessageColor);
    box-sizing: border-box;
    display: block;
    font-size: var(--componentInputErrorMessageFontSize);
    text-align: var(--componentInputErrorMessageTextAlign);
    margin-top: var(--componentInputErrorMessageMarginTop);
}

@media only screen and (min-width: 800px) {

    .container {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
    }

    .label {
        margin-bottom: 0px;
    }

    .inputContainer {
        margin-left: var(--componentInputInputContainerMarginLeft);
        /* max-width: var(--componentInputInputContainerMaxWidth); */
        max-width: calc(100% - 300px);
        width: 100%;
    }

}
