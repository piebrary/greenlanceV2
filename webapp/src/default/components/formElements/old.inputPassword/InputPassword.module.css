.container {
    background-color: var(--componentInputContainerBackgroundColor);
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-radius: var(--componentInputContainerBorderRadius);
    padding: var(--componentInputContainerPadding);
}

.label {
    font-size: var(--componentInputInputFontSize);
}

.inputContainer {
    margin-left: var(--componentInputInputContainerMarginLeft);
    flex-grow: 1;
    max-width: var(--componentInputInputContainerMaxWidth);
}

.inputField {
    display: flex;
    align-items: var(--componentInputInputFieldAlignItems);
    border-radius: var(--componentInputInputFieldBorderRadius);
    background-color: var(--componentInputInputFieldBackgroundColor);
}

.inputField:focus-within .input:not(:read-only) {
    transition: var(--componentInputTransition);
    box-shadow: var(--componentInputInputFieldBoxShadowFocus);
    border-bottom-left-radius: var(--componentInputInputFieldBorderBottomLeftRadius);
    border-bottom-right-radius: var(--componentInputInputFieldBorderBottomRightRadius);
}

.inputField:focus-within .input:not(:read-only) ~ .toggle {
    box-shadow: var(--componentInputInputFieldBoxShadowFocus);
    transition: var(--componentInputTransition);
}

.input {
    box-sizing: border-box;
    color: var(--componentInputInputColor);
    border: var(--componentInputInputBorder);
    padding: var(--componentInputInputPadding);
    font-size: var(--componentInputInputFontSize);
    outline: none;
    text-align: var(--componentInputInputTextAlign);
    width: 100%;
    background-color: var(--componentInputInputBackgroundColor);
    height: var(--componentInputInputHeight);
    resize: vertical;
    overflow: auto;
    transition: var(--componentInputTransition);
}

.input:focus {
    border: var(--componentInputInputBorderFocus);
    outline: none;
}

.input:read-only {
    background-color: var(--componentInputInputBackgroundColorReadOnly);
    color: var(--componentInputInputColorReadOnly);
    border-radius: var(--componentInputInputBorderRadiusReadOnly);
}

.input:read-only ~ .toggle {
    background-color: var(--componentInputInputBackgroundColorReadOnly);
    transition: var(--componentInputTransition);
}

.toggle {
    display: flex;
    align-items: center;
    cursor: pointer;
    transition: var(--componentInputHideToggleTransition);
    padding: var(--componentInputHideTogglePadding);
    transition: var(--componentInputTransition);
}

.toggle:hover {
    color: var(--componentInputHideToggleColorHover);
}

.errorMessage {
    min-width: 100%;
    color: var(--componentInputErrorMessageColor);
    box-sizing: border-box;
    display: block;
    font-size: var(--componentInputErrorMessageFontSize);
    text-align: var(--componentInputErrorMessageTextAlign);
    margin-top: var(--componentInputErrorMessageMarginTop);
}
